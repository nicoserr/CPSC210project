Index: src/main/model/Topic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.exceptions.EmptyNameException;\r\n\r\npublic class Topic {\r\n\r\n    private String topicName;\r\n    private Course parentCourse;\r\n    private String noteTaken;\r\n\r\n    // EFFECTS: creates a new empty topic with given name that belongs to parentCourse c\r\n    public Topic(String name, Course c) throws EmptyNameException {\r\n        if (name.length() == 0) {\r\n            throw new EmptyNameException();\r\n        }\r\n        topicName = name;\r\n        parentCourse = c;\r\n        noteTaken = \"\";\r\n    }\r\n\r\n    public String getNoteTaken() {\r\n        return noteTaken;\r\n    }\r\n\r\n    public String getTopicName() {\r\n        return topicName;\r\n    }\r\n\r\n    public Course getParentCourse() {\r\n        return parentCourse;\r\n    }\r\n\r\n    // EFFECTS: returns true if noteTaken is empty, false otherwise\r\n    public boolean isEmpty() {\r\n        return noteTaken.length() == 0;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/Topic.java b/src/main/model/Topic.java
--- a/src/main/model/Topic.java	(revision 081e6cb576fa5b9af827d5f094a3d1a75067e589)
+++ b/src/main/model/Topic.java	(date 1627330713310)
@@ -6,7 +6,6 @@
 
     private String topicName;
     private Course parentCourse;
-    private String noteTaken;
 
     // EFFECTS: creates a new empty topic with given name that belongs to parentCourse c
     public Topic(String name, Course c) throws EmptyNameException {
@@ -15,11 +14,6 @@
         }
         topicName = name;
         parentCourse = c;
-        noteTaken = "";
-    }
-
-    public String getNoteTaken() {
-        return noteTaken;
     }
 
     public String getTopicName() {
@@ -29,9 +23,4 @@
     public Course getParentCourse() {
         return parentCourse;
     }
-
-    // EFFECTS: returns true if noteTaken is empty, false otherwise
-    public boolean isEmpty() {
-        return noteTaken.length() == 0;
-    }
 }
Index: src/main/model/Subject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.exceptions.EmptyListException;\r\nimport model.exceptions.EmptyNameException;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Subject {\r\n\r\n    private ArrayList<Course> courses;\r\n    private String subjectName;\r\n\r\n    // EFFECTS: creates a new subject with given name and without any courses,\r\n    // if name length is zero throws EmptyNameException\r\n    public Subject(String name) throws EmptyNameException {\r\n        if (name.length() == 0) {\r\n            throw new EmptyNameException();\r\n        }\r\n        courses = new ArrayList<Course>();\r\n        subjectName = name;\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if there is no course with the same name in courses, a new course is created and added to the courses\r\n    //          under this Subject and returns true.\r\n    //          if EmptyNameException is thrown when creating a new Course, it will catch it and return false.\r\n    //          otherwise return false.\r\n    public boolean addCourse(String name) throws EmptyNameException {\r\n        boolean notFound = true;\r\n        for (Course c : courses) {\r\n            if (c.getCourseName().equals(name)) {\r\n                notFound = false;\r\n                break;\r\n            }\r\n        }\r\n        if (notFound) {\r\n            Course newCourse;\r\n            newCourse = new Course(name, this);\r\n            courses.add(newCourse);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if a Course with given name is found in courses, it is removed and true is returned,\r\n    // otherwise false is returned\r\n    public boolean removeCourse(String name) {\r\n        boolean result = false;\r\n        for (Course c : courses) {\r\n            if (c.getCourseName().equals(name)) {\r\n                courses.remove(c);\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // EFFECTS: if the list is empty, an EmptyListException is thrown, otherwise:\r\n    //          if a Course with given name is found in courses, it is retrieved\r\n    //          if no course is found, return null\r\n    public Course retrieveCourse(String name) throws EmptyListException {\r\n        Course result = null;\r\n        if (courses.size() == 0) {\r\n            throw new EmptyListException();\r\n        } else {\r\n            for (Course c : courses) {\r\n                if (c.getCourseName().equals(name)) {\r\n                    result = c;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public int getCoursesSize() {\r\n        return courses.size();\r\n    }\r\n\r\n    public ArrayList<Course> getCourses() {\r\n        return courses;\r\n    }\r\n\r\n    public String getSubjectName() {\r\n        return subjectName;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/Subject.java b/src/main/model/Subject.java
--- a/src/main/model/Subject.java	(revision 081e6cb576fa5b9af827d5f094a3d1a75067e589)
+++ b/src/main/model/Subject.java	(date 1627330713283)
@@ -10,21 +10,20 @@
     private ArrayList<Course> courses;
     private String subjectName;
 
-    // EFFECTS: creates a new subject with given name and without any courses,
-    // if name length is zero throws EmptyNameException
+    // EFFECTS: if name length is zero throws EmptyNameException
+    //          otherwise, creates a new subject with given name and without any courses
     public Subject(String name) throws EmptyNameException {
         if (name.length() == 0) {
             throw new EmptyNameException();
         }
-        courses = new ArrayList<Course>();
+        courses = new ArrayList<>();
         subjectName = name;
     }
 
     // MODIFIES: this
     // EFFECTS: if there is no course with the same name in courses, a new course is created and added to the courses
-    //          under this Subject and returns true.
-    //          if EmptyNameException is thrown when creating a new Course, it will catch it and return false.
-    //          otherwise return false.
+    //          under this Subject and returns true
+    //          otherwise return false
     public boolean addCourse(String name) throws EmptyNameException {
         boolean notFound = true;
         for (Course c : courses) {
@@ -45,7 +44,7 @@
 
     // MODIFIES: this
     // EFFECTS: if a Course with given name is found in courses, it is removed and true is returned,
-    // otherwise false is returned
+    //          otherwise false is returned
     public boolean removeCourse(String name) {
         boolean result = false;
         for (Course c : courses) {
@@ -60,7 +59,7 @@
 
     // EFFECTS: if the list is empty, an EmptyListException is thrown, otherwise:
     //          if a Course with given name is found in courses, it is retrieved
-    //          if no course is found, return null
+    //          if no course is found, returns null
     public Course retrieveCourse(String name) throws EmptyListException {
         Course result = null;
         if (courses.size() == 0) {
Index: src/main/model/Course.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.exceptions.EmptyListException;\r\nimport model.exceptions.EmptyNameException;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class Course {\r\n\r\n    private ArrayList<Topic> topics;\r\n    private String courseName;\r\n    private Subject parentSubject;\r\n\r\n    // EFFECTS: creates a new course with given name, empty list of topics and belonging to Subject s\r\n    //          if length of name is zero throws EmptyNameException\r\n    public Course(String name, Subject s) throws EmptyNameException {\r\n        if (name.length() == 0) {\r\n            throw new EmptyNameException();\r\n        }\r\n        courseName = name;\r\n        topics = new ArrayList<Topic>();\r\n        parentSubject = s;\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if there is no topic with the same name in topics, a new topic is created and added it to the topics\r\n    //          under this course and returns true.\r\n    //          if EmptyNameException is thrown when creating a new Topic, it will catch it and return false.\r\n    //          otherwise return false.\r\n    public boolean addTopic(String name) throws EmptyNameException {\r\n        boolean notFound = true;\r\n        for (Topic t : topics) {\r\n            if (t.getTopicName().equals(name)) {\r\n                notFound = false;\r\n                break;\r\n            }\r\n        }\r\n        if (notFound) {\r\n            Topic newTopic;\r\n            newTopic = new Topic(name, this);\r\n            topics.add(newTopic);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if a Topic with given name is found in topics, it is removed and true is returned,\r\n    // otherwise false is returned\r\n    public boolean removeTopic(String name) {\r\n        boolean result = false;\r\n        for (Topic t : topics) {\r\n            if (t.getTopicName().equals(name)) {\r\n                topics.remove(t);\r\n                result = true;\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // EFFECTS: if the list is empty, an EmptyListException is thrown, otherwise:\r\n    //          if a Topic with given name is found in topics, it is retrieved\r\n    //          if no topic is found, null is returned\r\n    public Topic retrieveTopic(String name) throws EmptyListException {\r\n        Topic result = null;\r\n        if (topics.size() == 0) {\r\n            throw new EmptyListException();\r\n        } else {\r\n            for (Topic t : topics) {\r\n                if (t.getTopicName().equals(name)) {\r\n                    result = t;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // EFFECT: return the size of topics\r\n    public int getTopicsSize() {\r\n        return topics.size();\r\n    }\r\n\r\n    public ArrayList<Topic> getTopics() {\r\n        return topics;\r\n    }\r\n\r\n    public String getCourseName() {\r\n        return courseName;\r\n    }\r\n\r\n    public Subject getParentSubject() {\r\n        return parentSubject;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/model/Course.java b/src/main/model/Course.java
--- a/src/main/model/Course.java	(revision 081e6cb576fa5b9af827d5f094a3d1a75067e589)
+++ b/src/main/model/Course.java	(date 1627330713289)
@@ -11,22 +11,21 @@
     private String courseName;
     private Subject parentSubject;
 
-    // EFFECTS: creates a new course with given name, empty list of topics and belonging to Subject s
-    //          if length of name is zero throws EmptyNameException
+    // EFFECTS: if length of name is zero throws EmptyNameException,
+    //          otherwise creates a new course with given name, empty list of topics and belonging to Subject s
     public Course(String name, Subject s) throws EmptyNameException {
         if (name.length() == 0) {
             throw new EmptyNameException();
         }
         courseName = name;
-        topics = new ArrayList<Topic>();
+        topics = new ArrayList<>();
         parentSubject = s;
     }
 
     // MODIFIES: this
     // EFFECTS: if there is no topic with the same name in topics, a new topic is created and added it to the topics
-    //          under this course and returns true.
-    //          if EmptyNameException is thrown when creating a new Topic, it will catch it and return false.
-    //          otherwise return false.
+    //          under this course and returns true
+    //          otherwise returns false
     public boolean addTopic(String name) throws EmptyNameException {
         boolean notFound = true;
         for (Topic t : topics) {
@@ -47,7 +46,7 @@
 
     // MODIFIES: this
     // EFFECTS: if a Topic with given name is found in topics, it is removed and true is returned,
-    // otherwise false is returned
+    //          otherwise false is returned
     public boolean removeTopic(String name) {
         boolean result = false;
         for (Topic t : topics) {
Index: src/test/model/TopicTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport model.exceptions.EmptyNameException;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\npublic class TopicTest {\r\n    Topic testTopic;\r\n    Course parentCourse;\r\n    Subject parentSubject;\r\n\r\n    @BeforeEach\r\n    public void setup(){\r\n        try {\r\n            parentSubject = new Subject(\"Parent Subject\");\r\n            parentCourse = new Course(\"Parent Course\", parentSubject);\r\n            testTopic = new Topic(\"Topic\", parentCourse);\r\n        } catch (Exception e) {\r\n            fail(\"Unexpected Exception\");\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void testTopicNoException() {\r\n        Topic fancyNameTopic;\r\n        try {\r\n            fancyNameTopic = new Topic(\"Overloading Overriding and Overachieving\", parentCourse);\r\n        } catch (Exception e) {\r\n            fail(\"Unexpected Exception\");\r\n            fancyNameTopic = null;\r\n        }\r\n        assertEquals(\"Overloading Overriding and Overachieving\", fancyNameTopic.getTopicName());\r\n        assertEquals(parentCourse, fancyNameTopic.getParentCourse());\r\n        assertEquals(\"\", fancyNameTopic.getNoteTaken());\r\n        assertTrue(fancyNameTopic.isEmpty());\r\n\r\n        assertEquals(\"Topic\", testTopic.getTopicName());\r\n    }\r\n\r\n    @Test\r\n    public void testTopicEmptyNameException() {\r\n        try {\r\n            new Topic(\"\", parentCourse);\r\n            fail(\"Expected EmptyNameException\");\r\n        } catch (EmptyNameException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/model/TopicTest.java b/src/test/model/TopicTest.java
--- a/src/test/model/TopicTest.java	(revision 081e6cb576fa5b9af827d5f094a3d1a75067e589)
+++ b/src/test/model/TopicTest.java	(date 1627330713304)
@@ -33,9 +33,6 @@
         }
         assertEquals("Overloading Overriding and Overachieving", fancyNameTopic.getTopicName());
         assertEquals(parentCourse, fancyNameTopic.getParentCourse());
-        assertEquals("", fancyNameTopic.getNoteTaken());
-        assertTrue(fancyNameTopic.isEmpty());
-
         assertEquals("Topic", testTopic.getTopicName());
     }
 
Index: src/main/ui/NotetakingApp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ui;\r\n\r\nimport model.Course;\r\nimport model.Subject;\r\nimport model.Topic;\r\nimport model.exceptions.EmptyNameException;\r\nimport model.exceptions.EmptyListException;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class NotetakingApp {\r\n    private ArrayList<Subject> subjects;\r\n    private Scanner input;\r\n\r\n    // EFFECTS: runs the notetaking application\r\n    public NotetakingApp() {\r\n        runNotetaking();\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: processes user input\r\n    private void runNotetaking() {\r\n        boolean keepGoing = true;\r\n        subjects = new ArrayList<Subject>();\r\n        String command;\r\n        input = new Scanner(System.in);\r\n        input.useDelimiter(\"\\n\");\r\n\r\n        while (keepGoing) {\r\n            displaySubjectMenu();\r\n            command = input.next();\r\n            command = command.toLowerCase();\r\n\r\n            if (command.equals(\"q\")) {\r\n                keepGoing = false;\r\n            } else {\r\n                processSubjectCommand(command);\r\n            }\r\n        }\r\n        System.out.println(\"Goodbye!\");\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: processes user command for subject menu\r\n    private void processSubjectCommand(String command) {\r\n        String subjectName;\r\n        if (command.equals(\"n\")) {\r\n            System.out.println(\"\\nEnter Subject name to add:\");\r\n            subjectName = input.next();\r\n            addSubject(subjectName);\r\n        } else if (command.equals(\"d\")) {\r\n            System.out.println(\"\\nEnter Subject name to delete:\");\r\n            subjectName = input.next();\r\n            removeSubject(subjectName);\r\n        } else if (command.equals(\"g\")) {\r\n            System.out.println(\"\\nEnter Subject name to go to:\");\r\n            subjectName = input.next();\r\n            try {\r\n                Subject subject = retrieveSubject(subjectName);\r\n                goToSubject(subject);\r\n            } catch (EmptyListException e) {\r\n                System.out.println(\"Subject list is empty\");\r\n            }\r\n        } else {\r\n            System.out.println(\"\\nInvalid command\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this and parentSubject\r\n    // EFFECTS: processes user command for courses menu belonging to parentSubject\r\n    private void processCourseCommand(String command, Subject parentSubject) {\r\n        String courseName;\r\n        if (command.equals(\"n\")) {\r\n            System.out.println(\"\\nEnter Course name to add:\");\r\n            courseName = input.next();\r\n            tryAddCourse(parentSubject, courseName);\r\n        } else if (command.equals(\"d\")) {\r\n            System.out.println(\"\\nEnter Course name to delete:\");\r\n            courseName = input.next();\r\n            tryRemoveCourse(parentSubject, courseName);\r\n        } else if (command.equals(\"g\")) {\r\n            System.out.println(\"\\nEnter Course name to go to:\");\r\n            courseName = input.next();\r\n            try {\r\n                Course course = parentSubject.retrieveCourse(courseName);\r\n                goToCourse(course);\r\n            } catch (EmptyListException e) {\r\n                System.out.println(\"Course list is empty\");\r\n            }\r\n        } else {\r\n            System.out.println(\"\\nInvalid command\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this and parentCourse\r\n    // EFFECTS: processes user command for topics menu belonging to parentCourse\r\n    private void processTopicCommand(String command, Course parentCourse) {\r\n        String topicName;\r\n        if (command.equals(\"n\")) {\r\n            System.out.println(\"\\nEnter Topic name to add:\");\r\n            topicName = input.next();\r\n            tryAddTopic(parentCourse, topicName);\r\n        } else if (command.equals(\"d\")) {\r\n            System.out.println(\"\\nEnter Topic name to delete:\");\r\n            topicName = input.next();\r\n            tryRemoveTopic(parentCourse, topicName);\r\n//        } else if (command.equals(\"g\")) {\r\n//            System.out.println(\"\\nEnter Topic name to go to:\");\r\n//            topicName = input.next();\r\n//            Topic topic = parentCourse.retrieveTopic(topicName);\r\n//            goToTopic(topic);\r\n        } else {\r\n            System.out.println(\"\\nInvalid command\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if subject is null, signal that no subject was found\r\n    //          otherwise, display course menu and process user input for that subject\r\n    private void goToSubject(Subject subject) {\r\n        if (subject == null) {\r\n            System.out.println(\"No subject found with that name\");\r\n        } else {\r\n            boolean keepGoing = true;\r\n            String courseCommand;\r\n            while (keepGoing) {\r\n                displayCourseMenu(subject);\r\n                courseCommand = input.next();\r\n                if (courseCommand.equals(\"r\")) {\r\n                    keepGoing = false;\r\n                } else {\r\n                    processCourseCommand(courseCommand, subject);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if course is null, signal that no course was found\r\n    //          otherwise, display topic menu and process user input for that course\r\n    private void goToCourse(Course course) {\r\n        if (course == null) {\r\n            System.out.println(\"No course found with that name\");\r\n        } else {\r\n            boolean keepGoing = true;\r\n            String topicCommand;\r\n            while (keepGoing) {\r\n                displayTopicMenu(course);\r\n                topicCommand = input.next();\r\n                if (topicCommand.equals(\"r\")) {\r\n                    keepGoing = false;\r\n                } else {\r\n                    processTopicCommand(topicCommand, course);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: adds a subject with given name to subjects\r\n    private void addSubject(String name) {\r\n        boolean notFound = true;\r\n        for (Subject s : subjects) {\r\n            if (s.getSubjectName().equals(name)) {\r\n                notFound = false;\r\n                break;\r\n            }\r\n        }\r\n        if (notFound) {\r\n            try {\r\n                subjects.add(new Subject(name));\r\n                System.out.println(\"Subject successfully added\");\r\n            } catch (EmptyNameException e) {\r\n                System.out.println(\"Subject cannot have blank name\");\r\n            }\r\n        } else {\r\n            System.out.println(\"A subject with that name already exists\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this\r\n    // EFFECTS: if subject with given name exists in subjects, then remove it and signal success\r\n    //          if it doesn't, signal failure\r\n    private void removeSubject(String name) {\r\n        boolean found = false;\r\n        for (Subject s : subjects) {\r\n            if (s.getSubjectName().equals(name)) {\r\n                subjects.remove(s);\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (found) {\r\n            System.out.println(\"Subject successfully deleted!\");\r\n        } else {\r\n            System.out.println(\"No subject found with that name\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: if subject with given name exists, it returns it, otherwise null is returned\r\n    private Subject retrieveSubject(String name) throws EmptyListException {\r\n        if (subjects.size() == 0) {\r\n            throw new EmptyListException();\r\n        } else {\r\n            Subject result = null;\r\n            for (Subject s : subjects) {\r\n                if (s.getSubjectName().equals(name)) {\r\n                    result = s;\r\n                    break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this and parentSubject\r\n    // EFFECTS: tries to add a course under parentSubject with courseName, if possible, do so and signal success\r\n    //          if course name is already taken or name is invalid, signal failure\r\n    private void tryAddCourse(Subject parentSubject, String courseName) {\r\n        try {\r\n            if (parentSubject.addCourse(courseName)) {\r\n                System.out.println(\"Course successfully added\");\r\n            } else {\r\n                System.out.println(\"A course with that name already exists\");\r\n            }\r\n        } catch (EmptyNameException e) {\r\n            System.out.println(\"Cannot leave name empty!\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this and parentSubject\r\n    // EFFECTS: if course with courseName is found, remove it from courses and signal success\r\n    //          otherwise signal failure\r\n    private void tryRemoveCourse(Subject parentSubject, String courseName) {\r\n        if (parentSubject.removeCourse(courseName)) {\r\n            System.out.println(\"Course successfully deleted!\");\r\n        } else {\r\n            System.out.println(\"No course found with that name\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this and parentCourse\r\n    // EFFECTS: tries to add a topic with topicName to parentCourse, if possible, do so and signal success\r\n    //          if topic name is already taken or name is invalid signal failure\r\n    private void tryAddTopic(Course parentCourse, String topicName) {\r\n        try {\r\n            if (parentCourse.addTopic(topicName)) {\r\n                System.out.println(\"Topic successfully added\");\r\n            } else {\r\n                System.out.println(\"A topic with that name already exists\");\r\n            }\r\n        } catch (EmptyNameException e) {\r\n            System.out.println(\"Cannot leave name empty!\");\r\n        }\r\n    }\r\n\r\n    // MODIFIES: this and parentCourse\r\n    // EFFECTS: if topic with topicName is found, remove it from topics and signal success\r\n    //          otherwise signal failure\r\n    private void tryRemoveTopic(Course parentCourse, String topicName) {\r\n        if (parentCourse.removeTopic(topicName)) {\r\n            System.out.println(\"Topic successfully deleted!\");\r\n        } else {\r\n            System.out.println(\"No Topic found with that name\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of options while looking at subjects to user\r\n    private void displaySubjectMenu() {\r\n        System.out.println(\"\\n-------------------------------------\");\r\n        try {\r\n            displaySubjects();\r\n        } catch (EmptyListException e) {\r\n            System.out.println(\"\\nSubject list is empty\");\r\n        } finally {\r\n            System.out.println(\"\\nCommands:\");\r\n            System.out.println(\"\\tn -> add new Subject\");\r\n            System.out.println(\"\\td -> delete Subject\");\r\n            System.out.println(\"\\tg -> go to Subject\");\r\n            System.out.println(\"\\tq -> quit\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of options while looking at courses to user\r\n    private void displayCourseMenu(Subject parentSubject) {\r\n        System.out.println(\"\\n-------------------------------------\");\r\n        System.out.println(\"\\nWithin subject: \" + parentSubject.getSubjectName());\r\n        try {\r\n            displayCourses(parentSubject);\r\n        } catch (EmptyListException e) {\r\n            System.out.println(\"\\nCourse list is empty\");\r\n        } finally {\r\n            System.out.println(\"\\nCommands:\");\r\n            System.out.println(\"\\tn -> add new Course\");\r\n            System.out.println(\"\\td -> delete Course\");\r\n            System.out.println(\"\\tg -> go to Course\");\r\n            System.out.println(\"\\tr -> return to Subject list\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of options while looking at topics to user\r\n    private void displayTopicMenu(Course parentCourse) {\r\n        System.out.println(\"\\n-------------------------------------\");\r\n        System.out.println(\"\\nWithin course: \" + parentCourse.getCourseName());\r\n        try {\r\n            displayTopics(parentCourse);\r\n        } catch (EmptyListException e) {\r\n            System.out.println(\"Topic list is empty\");\r\n        } finally {\r\n            System.out.println(\"\\nCommands:\");\r\n            System.out.println(\"\\tn -> add new Topic\");\r\n            System.out.println(\"\\td -> delete Topic\");\r\n            // System.out.println(\"\\tg -> go to Topic\");\r\n            // TODO: missing implementation for editing and adding notes to topic\r\n            System.out.println(\"\\tr -> return to Course list\");\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of Subjects to user, if subjects is empty throw EmptySubjectListException\r\n    private void displaySubjects() throws EmptyListException {\r\n        if (subjects.size() == 0) {\r\n            throw new EmptyListException();\r\n        } else {\r\n            System.out.println(\"\\nSubjects:\");\r\n            for (Subject s : subjects) {\r\n                System.out.println(\"\\t- \" + s.getSubjectName());\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of Courses belonging to Subject s to user,\r\n    // if courses is empty throw EmptySubjectListException\r\n    private void displayCourses(Subject s) throws EmptyListException {\r\n        ArrayList<Course> courses = s.getCourses();\r\n        if (courses.size() == 0) {\r\n            throw new EmptyListException();\r\n        } else {\r\n            System.out.println(\"Courses:\");\r\n            for (Course c : courses) {\r\n                System.out.println(\"\\t- \" + c.getCourseName());\r\n            }\r\n        }\r\n    }\r\n\r\n    // EFFECTS: displays menu of Topics belonging to Course c to user,\r\n    // if topics is empty throw EmptySubjectListException\r\n    private void displayTopics(Course c) throws EmptyListException {\r\n        ArrayList<Topic> topics = c.getTopics();\r\n        if (topics.size() == 0) {\r\n            throw new EmptyListException();\r\n        } else {\r\n            System.out.println(\"Topics:\");\r\n            for (Topic t : topics) {\r\n                System.out.println(\"\\t- \" + t.getTopicName());\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/ui/NotetakingApp.java b/src/main/ui/NotetakingApp.java
--- a/src/main/ui/NotetakingApp.java	(revision 081e6cb576fa5b9af827d5f094a3d1a75067e589)
+++ b/src/main/ui/NotetakingApp.java	(date 1627330713295)
@@ -22,7 +22,7 @@
     // EFFECTS: processes user input
     private void runNotetaking() {
         boolean keepGoing = true;
-        subjects = new ArrayList<Subject>();
+        subjects = new ArrayList<>();
         String command;
         input = new Scanner(System.in);
         input.useDelimiter("\n");
@@ -105,11 +105,6 @@
             System.out.println("\nEnter Topic name to delete:");
             topicName = input.next();
             tryRemoveTopic(parentCourse, topicName);
-//        } else if (command.equals("g")) {
-//            System.out.println("\nEnter Topic name to go to:");
-//            topicName = input.next();
-//            Topic topic = parentCourse.retrieveTopic(topicName);
-//            goToTopic(topic);
         } else {
             System.out.println("\nInvalid command");
         }
@@ -180,8 +175,8 @@
     }
 
     // MODIFIES: this
-    // EFFECTS: if subject with given name exists in subjects, then remove it and signal success
-    //          if it doesn't, signal failure
+    // EFFECTS: if subject with given name exists in subjects, then remove it and signals success to the user
+    //          if it doesn't, signal failure to the user
     private void removeSubject(String name) {
         boolean found = false;
         for (Subject s : subjects) {
@@ -215,8 +210,8 @@
     }
 
     // MODIFIES: this and parentSubject
-    // EFFECTS: tries to add a course under parentSubject with courseName, if possible, do so and signal success
-    //          if course name is already taken or name is invalid, signal failure
+    // EFFECTS: tries to add a course under parentSubject with courseName, if possible signals success to the user
+    //          if course name is already taken or name is invalid, signal failure to the user
     private void tryAddCourse(Subject parentSubject, String courseName) {
         try {
             if (parentSubject.addCourse(courseName)) {
@@ -230,8 +225,8 @@
     }
 
     // MODIFIES: this and parentSubject
-    // EFFECTS: if course with courseName is found, remove it from courses and signal success
-    //          otherwise signal failure
+    // EFFECTS: if course with courseName is found, remove it from courses and signals success to the user
+    //          otherwise signal failure to the user
     private void tryRemoveCourse(Subject parentSubject, String courseName) {
         if (parentSubject.removeCourse(courseName)) {
             System.out.println("Course successfully deleted!");
@@ -241,8 +236,8 @@
     }
 
     // MODIFIES: this and parentCourse
-    // EFFECTS: tries to add a topic with topicName to parentCourse, if possible, do so and signal success
-    //          if topic name is already taken or name is invalid signal failure
+    // EFFECTS: tries to add a topic with topicName to parentCourse, if possible, do so and signals success to the user
+    //          if topic name is already taken or name is invalid signal failure to the user
     private void tryAddTopic(Course parentCourse, String topicName) {
         try {
             if (parentCourse.addTopic(topicName)) {
@@ -256,8 +251,8 @@
     }
 
     // MODIFIES: this and parentCourse
-    // EFFECTS: if topic with topicName is found, remove it from topics and signal success
-    //          otherwise signal failure
+    // EFFECTS: if topic with topicName is found, remove it from topics and signals success to the user
+    //          otherwise signal failure to the user
     private void tryRemoveTopic(Course parentCourse, String topicName) {
         if (parentCourse.removeTopic(topicName)) {
             System.out.println("Topic successfully deleted!");
@@ -311,13 +306,11 @@
             System.out.println("\nCommands:");
             System.out.println("\tn -> add new Topic");
             System.out.println("\td -> delete Topic");
-            // System.out.println("\tg -> go to Topic");
-            // TODO: missing implementation for editing and adding notes to topic
             System.out.println("\tr -> return to Course list");
         }
     }
 
-    // EFFECTS: displays menu of Subjects to user, if subjects is empty throw EmptySubjectListException
+    // EFFECTS: displays menu of Subjects to user, if subjects is empty throw EmptyListException
     private void displaySubjects() throws EmptyListException {
         if (subjects.size() == 0) {
             throw new EmptyListException();
@@ -330,7 +323,7 @@
     }
 
     // EFFECTS: displays menu of Courses belonging to Subject s to user,
-    // if courses is empty throw EmptySubjectListException
+    // if courses is empty throw EmptyListException
     private void displayCourses(Subject s) throws EmptyListException {
         ArrayList<Course> courses = s.getCourses();
         if (courses.size() == 0) {
@@ -344,7 +337,7 @@
     }
 
     // EFFECTS: displays menu of Topics belonging to Course c to user,
-    // if topics is empty throw EmptySubjectListException
+    // if topics is empty throw EmptyListException
     private void displayTopics(Course c) throws EmptyListException {
         ArrayList<Topic> topics = c.getTopics();
         if (topics.size() == 0) {
